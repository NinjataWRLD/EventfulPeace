// <auto-generated />
using System;
using EventfulPeace.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventfulPeace.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250322085145_Fixed_Event_Seeding")]
    partial class Fixed_Event_Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Application")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventfulPeace.Domain.Events.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Locations", "Application");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a77afb62-ec0c-4322-9ea7-474641d76164"),
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = new Guid("b60131ca-1d56-4e4e-b43e-b68eed269473"),
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = new Guid("30822e93-9470-4f10-b6ae-70a2f512228a"),
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = new Guid("f6ef9357-e048-4ee4-b7e3-82082d304b93"),
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = new Guid("faf4e858-44ad-40bc-98f1-2e0e7b9e65f1"),
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = new Guid("2bf2c22b-325b-42e5-ae3e-23a20c69408d"),
                            Name = "Kardjali"
                        },
                        new
                        {
                            Id = new Guid("2a316f7e-0112-4815-8033-18c6cda5f3b6"),
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = new Guid("84b77c7d-f9d4-4e85-a468-67fc3a60a124"),
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = new Guid("ac80410e-d7f5-41cc-92de-649bc134c963"),
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = new Guid("0ff3a9fb-1c7e-4313-bf81-6bfe5c05445d"),
                            Name = "Montana"
                        },
                        new
                        {
                            Id = new Guid("2885a542-2b35-4cd3-9cfa-2ebf23e80ea1"),
                            Name = "Pazardjik"
                        },
                        new
                        {
                            Id = new Guid("60dc9276-4645-4098-866e-0dc330829d3e"),
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = new Guid("be84bfbb-2aa8-40be-a028-99ec8c07c7fa"),
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = new Guid("233a5b44-aefd-4163-94ac-7c9d921d8129"),
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = new Guid("5f035f95-28bd-4cee-ae2d-40c921f29a1d"),
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = new Guid("51e0aff1-47fa-4f3b-82a0-b41fa2851a58"),
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = new Guid("4402ee9e-8b3e-45c1-859e-c7c707be1fd1"),
                            Name = "Smolyan"
                        },
                        new
                        {
                            Id = new Guid("67ef3033-def7-4211-8f09-a03243a33fff"),
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = new Guid("e3c0e30b-5587-4c1a-a864-db1d66a9c3e0"),
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("06102732-56c9-425b-831a-cf2d8de5476c"),
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = new Guid("2d562197-83b2-472e-a5d7-8ee789b4cfc3"),
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = new Guid("8b921b20-b3c5-469a-b01c-4683c3a885a7"),
                            Name = "Varna"
                        },
                        new
                        {
                            Id = new Guid("42a6aff1-d977-4ef0-90ca-097ebeeb4eea"),
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = new Guid("b54800f9-a8d7-4200-ba0a-04ea90919374"),
                            Name = "Vidin"
                        },
                        new
                        {
                            Id = new Guid("c9c7eed3-189a-419d-8dc3-ecae6a41aa77"),
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = new Guid("9da8e2be-fcd9-408e-93a7-aeda0febafef"),
                            Name = "Yambol"
                        });
                });

            modelBuilder.Entity("EventfulPeace.Domain.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("ImageContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageContentType");

                    b.Property<string>("ImageKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("OccursAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OccursAt");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events", "Application");

                    b.HasData(
                        new
                        {
                            Id = new Guid("762ddec2-25c9-4183-9891-72a19d84a839"),
                            CreatedAt = new DateTime(2025, 3, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = new Guid("a9c4e2e4-f8d9-49ce-ae37-7dda2d65df90"),
                            Description = "Welcome to our not-like-the-others Martenitsa Workshop!",
                            ImageContentType = "image/jpeg",
                            ImageKey = "images/Martenitsa Workshop-762ddec2-25c9-4183-9891-72a19d84a839.jpg",
                            LocationId = new Guid("b60131ca-1d56-4e4e-b43e-b68eed269473"),
                            Name = "Martenitsa Workshop",
                            OccursAt = new DateTime(2025, 3, 3, 15, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("e1101e2c-32cc-456f-9c82-4f1d1a65d141"),
                            CreatedAt = new DateTime(2025, 3, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = new Guid("2c7667ad-716b-4606-b50d-a370ecdb1a00"),
                            Description = "Endulge in various cuisines, carefully prepared by the best of street food cooks",
                            ImageContentType = "image/jpeg",
                            ImageKey = "images/Street Food Festeival-e1101e2c-32cc-456f-9c82-4f1d1a65d141.jpg",
                            LocationId = new Guid("e3c0e30b-5587-4c1a-a864-db1d66a9c3e0"),
                            Name = "Street Food Festeival",
                            OccursAt = new DateTime(2025, 3, 21, 19, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("f3ad41d3-ee90-4988-9195-8b2a8f4f2733"),
                            CreatedAt = new DateTime(2025, 3, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = new Guid("7f6e3868-ca03-44d6-b4a3-d947ac012ca6"),
                            Description = "Gaze at the stars through the lenses of professional telescopes and witness the beauty of the night sky",
                            ImageContentType = "image/webp",
                            ImageKey = "images/Astronomical View-f3ad41d3-ee90-4988-9195-8b2a8f4f2733.webp",
                            LocationId = new Guid("233a5b44-aefd-4163-94ac-7c9d921d8129"),
                            Name = "Astronomical View",
                            OccursAt = new DateTime(2025, 4, 5, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("fad1b19d-5333-4633-bd84-d67c64649f65"),
                            CreatedAt = new DateTime(2025, 3, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = new Guid("7f6e3868-ca03-44d6-b4a3-d947ac012ca6"),
                            Description = "A sport event for all nature lovers, with a route through picturesque greenery",
                            ImageContentType = "image/jpeg",
                            ImageKey = "images/The Greenery Challenge-fad1b19d-5333-4633-bd84-d67c64649f65.jpg",
                            LocationId = new Guid("42a6aff1-d977-4ef0-90ca-097ebeeb4eea"),
                            Name = "The Greenery Challenge",
                            OccursAt = new DateTime(2025, 5, 5, 8, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EventfulPeace.Domain.Invitations.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EventId");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReceiverId");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("SenderId");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SentAt");

                    b.HasKey("Id");

                    b.ToTable("Invitations", "Application");
                });

            modelBuilder.Entity("EventfulPeace.Persistence.ShadowEntities.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("ParticipantId", "EventId");

                    b.ToTable("Participants", "Application");
                });

            modelBuilder.Entity("EventfulPeace.Domain.Events.Event", b =>
                {
                    b.HasOne("EventfulPeace.Domain.Events.Entities.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EventfulPeace.Domain.Events.Entities.Location", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
